import time
import requests
import smtplib
from timeit import default_timer as timer


start = timer()


def send_email(user, pwd, recipient, subject, body): 

    gmail_user = user
    gmail_pwd = pwd
    FROM = user
    TO = recipient if type(recipient) is list else [recipient]
    SUBJECT = subject
    TEXT = body
    

    # Prepare actual message
    message = """From: %s\nTo: %s\nSubject: %s\n\n%s
    """ % (FROM, ", ".join(TO), SUBJECT, TEXT)
    try:
        server = smtplib.SMTP("smtp.gmail.com", 587) #start smtp server on port 587
        server.ehlo()
        server.starttls()
        server.login(gmail_user, gmail_pwd) #login to gmail server
        server.sendmail(FROM, TO, message) #actually perform sending of mail
        server.close() #end server
        print ('Successfully sent the mail.') #alert user mail was sent
    except Exception: #else tell user it failed and why
        print ("Failed to send mail.")

def main(): #main function



    with requests.Session() as c: #don't want to write requests. all the time!
        url        =      ''      #url you want to scrape
        wait_time  =      10      #customizable time to wait to check for changes IE every 5 secs

        user            = '' #emailuser@gmail.com
        pwd             = ''  #app password generated by google IE "djfj rubi sifu sofi"
        recipient       = '' #recievingemail@gmail.com
        subject         = 'SITE UPDATED' #message subject
        body            = 'CHANGE AT ' + str(url) #

        page1 = c.get(url) #base page that will be compared against

        time.sleep(wait_time) #wait inbeetween initial retrieval and comparison actions

        page2 = c.get(url) #page to be compared against page1 / the base page

        if page1.content == page2.content: #if else statement to check if content of page remained same
            end = timer()
            if ((end-start)) >= 60:
                timeMinutes = (end-start) / 60
                print ("[-]No Change Detected @ " +str(url)+ "\n[-]Elapsed Time: " +str(timeMinutes)+ " minutes")
            else:
                print ('[-]No Change Detected @ ' +str(url)+ "\n[+]Elapsed Time: " +str((end-start))+ " seconds")


        else:
            end = timer()
            if int((end-start)) >= 60:
                timeMinutes = (end-start) / 60
                print ('[+]Change Detected - \n[+]Elapsed Time: ' +str(timeMinutes)+ " minutes")  #if anything was changed - it sends an email alerting the user
            else:
                print ('[+]Change Detected - \n[+]Elapsed Time: ' +str((end-start))+ " seconds")  #if anything was changed - it sends an email alerting the user

            send_email(user, pwd, recipient, subject, body) #send notification email


        page2  = None #clear page2 variable before looping through main function again

       # time.sleep(wait_time) optional wait beetween starting again

        main() # easy loop method


if __name__ == "__main__": #start main function
    main()

